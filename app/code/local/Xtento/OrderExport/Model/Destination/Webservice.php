<?php

/**
 * Product:       Xtento_OrderExport (1.7.6)
 * ID:            vNT2XUbhTHiJRNS8g7WjWAvsRjDEUU+rYixngMi8TAY=
 * Packaged:      2015-04-29T10:12:11+00:00
 * Last Modified: 2014-03-12T23:02:31+01:00
 * File:          app/code/local/Xtento/OrderExport/Model/Destination/Webservice.php.sample
 * Copyright:     Copyright (c) 2015 XTENTO GmbH & Co. KG <info@xtento.com> / All rights reserved.
 */

require_once (BP . DS .'lib/Icube/xml2array.php');  // Icube Update

class Xtento_OrderExport_Model_Destination_Webservice extends Xtento_OrderExport_Model_Destination_Abstract
{
    /*
     * !!!!! IMPORTANT !!!!!
     *
     * Modify below this line. Add custom functions, similar to the function below. There MUST be one parameter which will contain the files which have been generated by the module in the format array($filename => $fileContent)
     */
    public function createSOB2C($fileArray)
    {
        foreach ($fileArray as $filename => $fileContent) {

            $arr = new XML2Array();
            //convert file's content to array
            $parameter = $arr->createArray($fileContent);
            $url = Mage::getStoreConfig('orderexport/general/url',Mage::app()->getStore());
            // $url = 'http://10.1.32.80/Uniws_rupa2/index.php/RetailEcommerce/dev/?wsdl';
            Mage::log('SOAP Call start', null, 'sob2c.log');

            $soap = new SoapClient($url, array("trace" => 1,
              "exceptions" => 1));
            $soap->__soapCall('Save_B2C_Order',array('parameters' => $parameter));

            //--------log-----------
            $result = $soap->__last_response;
            $report = $arr->createArray($result);
            
            //get id from filecontent
            $order_id = $parameter["Order_Data_B2C"]["b2c_order_detail"]["ORDERID"];
            $invoice_id = $parameter["Order_Data_B2C"]["b2c_order_detail"]["INVOICEID"];
            //get send order result & create log
            $sapOrderResult = $report["SOAP-ENV:Envelope"]["SOAP-ENV:Body"]["Save_B2C_OrderResponse"]["Save_SAP_B2C_OrderResult"];
            Mage::log('SO B2C response for Order ID #'.$order_id.' Invoice ID #'.$invoice_id.' : '.$sapOrderResult, null, 'sob2c.log');
            

            //if order saved to SAP succesfully, save sap so number to database
            // if(strpos(strtolower($sapOrderResult), 'succesfully') !== false)
            // {
            //   $sapSoNumber = substr($sapOrderResult, strpos($sapOrderResult, "|") + 1);
            //   $order = Mage::getModel('sales/order')->loadByIncrementId($order_id);

            //   $resource = Mage::getSingleton('core/resource');
            //   $writeConnection = $resource->getConnection('core_write');
            //   $table = $resource->getTableName('amorderattr/order_attribute');
            //   $query = "UPDATE {$table} SET sap_so_number = '{$sapSoNumber}' WHERE order_id = ".$order->getEntityId();
            //   $writeConnection->query($query);
            // }
        }
    }

    public function sendConsignmentProducts($fileArray)
    {
        foreach ($fileArray as $filename => $fileContent) {

            $arr = new XML2Array();
            //convert file's content to array
            /*$fileContent = '<?xml version="1.0"?><n0:MT_B2C_ODI_SOEC_Request xmlns:n0="http://kawanlama.com/B2C/Sales"><HEADER><ORDERID>ORDER_ID_BETA</ORDERID><ORDERDATE>20151019</ORDERDATE><ORDERTYPE>B2C</ORDERTYPE><CUSTNAME1>Andreas</CUSTNAME1><CUSTNAME2>Budi Kurniawan</CUSTNAME2><EMAIL>andreas.budi@kawanlama.com</EMAIL><PHONE>021-5828282</PHONE><ADDRESS1>Gedung Kawan Lama</ADDRESS1><ADDRESS2>Jl. Puri Kembangan No. 1</ADDRESS2><ADDRESS3>Meruya - Kembangan</ADDRESS3><CITY>Jakarta Barat</CITY><PROVINCE>DKI Jakarta</PROVINCE><COUNTRY>ID</COUNTRY><POSTALCODE>11480</POSTALCODE><SHIPCOST>50000</SHIPCOST><GRANDPRICE>30000000</GRANDPRICE><REMARK>Kirim barangnya jangan lama2. Sampai Lobby Hubungi Ext 402</REMARK><SALESID></SALESID><CUSTNO></CUSTNO><SOURCE>E_COMMERCE_RETAIL_B2C</SOURCE><SITE></SITE><SLOC></SLOC><SHIPPINGPOINT></SHIPPINGPOINT><REQDLVDATE></REQDLVDATE><SALESOFFICE></SALESOFFICE><SALESGROUP></SALESGROUP><BOOKINGID></BOOKINGID><PAYERNAME1>Dheny Setiawan</PAYERNAME1><PAYERNAME2>KUSUMA JAYA</PAYERNAME2><PAYERADDR1>JL. PRINGGODANI No.30</PAYERADDR1><PAYERADDR2>KUSUMA BANGSA</PAYERADDR2><PAYERADDR3>RT.001 / RW.004 KELURAHAN BAGUS</PAYERADDR3><PAYERPOSTCODE>11480</PAYERPOSTCODE><PAYERCITY>JAKARTA BARAT</PAYERCITY><PAYERPROVINCE>DKI JAKARTA</PAYERPROVINCE><PAYERNPWP>123459876012389</PAYERNPWP></HEADER><T_ITEM><ID>1</ID><PRODUCTNO>HK0000005</PRODUCTNO><SALESPRICE>500000</SALESPRICE><QUANTITY>2</QUANTITY><UNIT>EA</UNIT><CURRENCY>IDR</CURRENCY><CONDTYPE></CONDTYPE></T_ITEM><T_ITEM><ID>1</ID><PRODUCTNO>HK0000005</PRODUCTNO><SALESPRICE>100000</SALESPRICE><QUANTITY>2</QUANTITY><UNIT>EA</UNIT><CURRENCY>IDR</CURRENCY><CONDTYPE>ZV04</CONDTYPE></T_ITEM><T_ITEM><ID>1</ID><PRODUCTNO>HK0000005</PRODUCTNO><SALESPRICE>35000</SALESPRICE><QUANTITY>2</QUANTITY><UNIT>EA</UNIT><CURRENCY>IDR</CURRENCY><CONDTYPE>ZCOM</CONDTYPE></T_ITEM><T_ITEM><ID>1</ID><PRODUCTNO>HK0000005</PRODUCTNO><SALESPRICE>15000</SALESPRICE><QUANTITY>2</QUANTITY><UNIT>EA</UNIT><CURRENCY>IDR</CURRENCY><CONDTYPE>ZDMM</CONDTYPE></T_ITEM><T_ITEM><ID>1</ID><PRODUCTNO>HK0000005</PRODUCTNO><SALESPRICE>60000</SALESPRICE><QUANTITY>2</QUANTITY><UNIT>EA</UNIT><CURRENCY>IDR</CURRENCY><CONDTYPE>ZPUR</CONDTYPE></T_ITEM><T_ITEM><ID>1</ID><PRODUCTNO>HK0000005</PRODUCTNO><SALESPRICE>40000</SALESPRICE><QUANTITY>2</QUANTITY><UNIT>EA</UNIT><CURRENCY>IDR</CURRENCY><CONDTYPE>ZDOT</CONDTYPE></T_ITEM><T_ITEM><ID>1</ID><PRODUCTNO>HK0000005</PRODUCTNO><SALESPRICE>20000</SALESPRICE><QUANTITY>2</QUANTITY><UNIT>EA</UNIT><CURRENCY>IDR</CURRENCY><CONDTYPE>ZPU1</CONDTYPE></T_ITEM><T_ITEM><ID>2</ID><PRODUCTNO>115515</PRODUCTNO><SALESPRICE>150000</SALESPRICE><QUANTITY>3</QUANTITY><UNIT>EA</UNIT><CURRENCY>IDR</CURRENCY><CONDTYPE></CONDTYPE></T_ITEM><ID>2</ID><PRODUCTNO>115515</PRODUCTNO><SALESPRICE>200000</SALESPRICE><QUANTITY>3</QUANTITY><UNIT>EA</UNIT><CURRENCY>IDR</CURRENCY><CONDTYPE>ZV05</CONDTYPE></T_ITEM></n0:MT_B2C_ODI_SOEC_Request>';
            */
            $parameter = $arr->createArray($fileContent);
            // $url = Mage::getStoreConfig('orderexport/general/url',Mage::app()->getStore());
            $url = 'http://10.1.32.80/Uniws_rupa2/index.php/RetailEcommerce/dev/?wsdl';
            $soap = new SoapClient($url, array("trace" => 1,
              "exceptions" => 1));
            $soap->__soapCall('Save_B2C_Order',array('parameters' => $parameter));

            //--------log-----------
            $result = $soap->__last_response;
            $report = $arr->createArray($result);
            //get id from filecontent
            // $order_id = $parameter["Order_Data_B2C"]["b2c_order_detail"]["ORDERID"];
            //get send order result & create log
            // $sapOrderResult = $report["SOAP-ENV:Envelope"]["SOAP-ENV:Body"]["Save_B2C_OrderResponse"]["Save_SAP_B2C_OrderResult"];
            Mage::log('SO B2C response: '.$result, null, 'sob2c.log');

            //if order saved to SAP succesfully, save sap so number to database
            // if(strpos(strtolower($sapOrderResult), 'succesfully') !== false)
            // {
            //   $sapSoNumber = substr($sapOrderResult, strpos($sapOrderResult, "|") + 1);
            //   $order = Mage::getModel('sales/order')->loadByIncrementId($order_id);

            //   $resource = Mage::getSingleton('core/resource');
            //   $writeConnection = $resource->getConnection('core_write');
            //   $table = $resource->getTableName('amorderattr/order_attribute');
            //   $query = "UPDATE {$table} SET sap_so_number = '{$sapSoNumber}' WHERE order_id = ".$order->getEntityId();
            //   $writeConnection->query($query);
            // }
        }
    }

    /*
     * !!!!! Do not modify below this line !!!!!
     */
    public function testConnection()
    {
        $this->initConnection();
        if (!$this->getDestination()->getBackupDestination()) {
            $this->getDestination()->setLastResult($this->getTestResult()->getSuccess())->setLastResultMessage($this->getTestResult()->getMessage())->save();
        }
        return $this->getTestResult();
    }

    public function initConnection()
    {
        $this->setDestination(Mage::getModel('xtento_orderexport/destination')->load($this->getDestination()->getId()));
        $testResult = new Varien_Object();
        $this->setTestResult($testResult);
        if (!@method_exists($this, $this->getDestination()->getCustomFunction())) {
            $this->getTestResult()->setSuccess(false)->setMessage(Mage::helper('xtento_orderexport')->__('Custom function/method \'%s\' not found in %s.', $this->getDestination()->getCustomFunction(), __FILE__));
        } else {
            $this->getTestResult()->setSuccess(true)->setMessage(Mage::helper('xtento_orderexport')->__('Custom function/method found and ready to use.', __FILE__));
        }
        return true;
    }

    public function saveFiles($fileArray)
    {
        if (empty($fileArray)) {
            return array();
        }
        // Init connection
        $this->initConnection();
        // Call custom function
        @$this->{$this->getDestination()->getCustomFunction()}($fileArray);
        return array_keys($fileArray);
    }
}

